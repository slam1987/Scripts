import os
import hashlib
import csv

print("\nSHA256 Malware Signature Scanner\nBy: Stanley Lam - 2019\n")

input1 = input("Specify a directory: ")
input2 = input("Specify a SHA256 hash list file: ")
input3 = input("Specify the output file: ")


# Detect which files are included in the scan based on user input
def prepCompute(var1):
    path = var1
    files = []
    for r, d, f in os.walk(path):
        for file in f:
            if '' in file:
                files.append(os.path.join(r, file))
    f = open("filenames.tmp","w+", encoding='utf-8')
    print("\nGathering data recursively from " + str(path) + "\nPlease wait...")
    for x in files:
        f.write(x + "\n")
    f.close()
    print("Found a total of " + str(len(files)) + " files to be scanned!\n")


# Hash previously detected files using SHA256
def hashCompute():
    with open("filenames.tmp", "r", encoding='utf-8') as nameFile:
            lineList = list(nameFile)
    hashFile = open("hash_table.tmp", "w+", encoding='utf-8')
    print("Calculating using SHA256 hashing algorithm...\nPlease wait...")
    for x in lineList:
        try:
            var = hashlib.sha256(open(x.replace('\n', ''),'rb').read()).hexdigest()
            hashFile.write(x.replace("\n","") + "," + var + "\n")
        except:
            pass
    nameFile.close()
    hashFile.close()
    print("Hash calculations complete!\n")


# Check for collision between malware signatures and previously generated hashes
def compareCompute(var1, var2):
    with open(var1, "r", encoding='utf-8') as openMalSig:
        malSig = list(openMalSig)
    with open("hash_table.tmp", "r", encoding='utf-8') as openHashTable:
        hashTable = list(openHashTable)
    outputFile = open(var2, "a+")
    print("Checking for malware signatures...\nPlease wait...\n")
    cnt=0
    infect=0
    for x in range(1, len(hashTable)):
        for y in malSig:
            if hashTable[cnt].split(",")[1] == y:
                print("Found malware signature match for: " + str(hashTable[cnt].split(",")[0]) )
                outputFile.write(hashTable[cnt].split(",")[0] + "\nHASH: " + hashTable[cnt].split(",")[1] + "\n" )
                infect+=1
            else:
                pass
        cnt+=1
    print("\nMalware scan complete!\nFound " + str(infect) + " infected files!\nLog file: " + var2 + "\n")
    openMalSig.close()
    openHashTable.close()
    outputFile.close()


# Removal of temporary files (comment this function for debugging)
def cleanClose():
    os.remove("filenames.tmp")
    os.remove("hash_table.tmp")


prepCompute(input1)
hashCompute()
compareCompute(input2,input3)
cleanClose()
